package verifytest;
import java.util.ArrayList;
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Duration;
public class brokenlinks {
 WebDriver driver;
    List<String> brokenLinksReport = new ArrayList<>();
    List<String> unsupportedLinksReport = new ArrayList<>();
    List<String> validLinksForContentCheck = new ArrayList<>();
@BeforeClass
    public void setUp() {
        // Set the path to the ChromeDriver executable
        System.setProperty("webdriver.chrome.driver", "C:\\Users\\REHANA\\OneDrive\\Desktop\\Seleniumsoftware\\chromedriver-win64\\chromedriver.exe");
driver = new ChromeDriver();
// Navigate to the website
        driver.get("https://yellowslate.com/hyderabad");
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(20));
        driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
    }
@Test
    public void checkBrokenLinks() {
        List<WebElement> links = driver.findElements(By.xpath("//a[contains(@href,'.')]"));
for (WebElement link : links) {
            String url = link.getAttribute("href");
            if (url != null && !url.isEmpty() && (url.startsWith("http") || url.startsWith("https"))) {
                try {
                    HttpURLConnection con = (HttpURLConnection) (new URL(url).openConnection());
                    con.setRequestMethod("HEAD");
                    con.connect();
int respCode = con.getResponseCode();
  if (respCode >= 404) {
                        String message = "Broken Link Text: " + link.getText() + " URL: " + url + " Response Code: " + respCode;
                        System.out.println(message);
                        brokenLinksReport.add(message);
                    } else {
                        validLinksForContentCheck.add(url);
                    }
                } catch (IOException e) {
                    String message = "Exception checking URL: " + url + " Error: " + e.getMessage();
                    System.out.println(message);
                    brokenLinksReport.add(message);
                }
            } else {
                String message = "Skipping invalid or unsupported URL for link text: " + link.getText() + " URL: " + url;
                System.out.println(message);
                unsupportedLinksReport.add(message);
            }
        }checkContentForValidLinks();
    }private void checkContentForValidLinks() {
        for (String url : validLinksForContentCheck) {
            try {
                driver.navigate().to(url);
                String pageContent = driver.getPageSource();
                if (pageContent.contains("0 schools")) { // Adjust the condition based on actual page content
                    String message = "Valid Link but no content: " + url;
                    System.out.println(message);
                    brokenLinksReport.add(message);
                }
            } catch (Exception e) {
                String message = "Exception navigating to URL: " + url + " Error: " + e.getMessage();
                System.out.println(message);
                brokenLinksReport.add(message);
            }}}
@AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }}}
